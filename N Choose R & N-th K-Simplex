// ----------------------------------------------------
// n Choose r (combinatorics)
// formula: n! / (r! * (n - r)!)
// ----------------------------------------------------
// n-th k-Simplex Number (Pascal's triangle)
// formula: ((n - 1) + k)! / ((n - 1)! * k!)
// ----------------------------------------------------


// ----------------------------------------------------
// Relationships:
// ----------------------------------------------------
// ncr(n, r) = nCr(n, n - r)
// nks(n, k) = nks(k + 1, n - 1)
// nks(n, k) = ncr(n + k - 1, Math.min(k, n - 1))


// ----------------------------------------------------
// O(r/k) time, O(1) space, small numbers
// ----------------------------------------------------
const ncr = (n, r) => {
    r = Math.min(r, n - r)
    let res = 1, i = 1
    for (n++; i <= r; i++)
        res *= (n - i) / i
    return Math.round(res)
}
const nks = (n, k) => {
    if (n <= k)
        [n, k] = [k + 1, n - 1]
    let res = 1, i = 1
    for (n--; i <= k; i++)
        res *= (n + i) / i
    return res
}


// ----------------------------------------------------
// O(r/k) time, O(1) space, big numbers
// ----------------------------------------------------
const ncr = (n, r) => {
    r = Math.min(r, n - r)
    let res = 1n, bn = BigInt(n + 1)
    for (let i = 1n; i <= r; i++)
        res = res * (bn - i) / i
    return res
}
const nks = (n, k) => {
    if (n <= k)
        [n, k] = [k + 1, n - 1]
    let res = 1n, bn = BigInt(n - 1)
    for (let i = 1n; i <= k; i++)
        res = res * (bn + i) / i
    return res
}


// ----------------------------------------------------
// O(r/k) time, O(r/k) space, small numbers
// ----------------------------------------------------
const ncr = (n, r) => r ? ncr(n - 1, r - 1) * n / r : 1
const nks = (n, k) => k ? nks(n, k - 1) * (n + k - 1) / k : 1


// ----------------------------------------------------
// O(r/k) time, O(r/k) space, big numbers
// ----------------------------------------------------
const ncr = (n, r) => r ? ncr(n - 1, r - 1) * BigInt(n) / BigInt(r) : 1n
const nks = (n, k) => k ? nks(n, k - 1) * BigInt(n + k - 1) / BigInt(k) : 1n


// ----------------------------------------------------
// Factorials class (on-demand) w/ ncr() and nks()
// ----------------------------------------------------
class BigFactsMod {
    constructor(n=1, nMax=n, mod=1000000007n) {
        this.n = 1
        this.mod = mod
        this.inv = new BigInt64Array(nMax + 1).fill(1n, 0, 2)
        this.fact = new BigInt64Array(nMax + 1).fill(1n, 0, 2)
        this.ifact = new BigInt64Array(nMax + 1).fill(1n, 0, 2)
        this.build(n)
    }
    build(n) {
        let {mod, inv, fact, ifact} = this, nm = Number(mod)
        for (let i = this.n + 1, bi = BigInt(i); i <= n; i++, bi++) {
            inv[i] = mod - mod / bi * inv[nm % i] % mod
            fact[i] = fact[i - 1] * bi % mod
            ifact[i] = ifact[i - 1] * inv[i] % mod
        }
        this.n = n
    }
    ncr(n, r) {
        if (n > this.n)
            this.build(n)
        let {fact, ifact, mod} = this
        return fact[n] * ifact[r] * ifact[n - r] % mod
    }
    nks(n, k) {
        if (n <= k)
            [n, k] = [k + 1, n - 1]
        if (n + k - 1 > this.n)
            this.build(n + k - 1)
        let {fact, ifact, mod} = this
        return fact[n + k - 1] * ifact[n - 1] * ifact[k] % mod
    }
}
