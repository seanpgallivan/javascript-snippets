const kthElement = (arr, k, left=0, right=arr.length - 1, comp=(a,b) => a - b) => {
    if (k < 0 || k > arr.length)
        return undefined
    while (true) {
        let a = left, b = left, c = right, 
            pivot = arr[findPivot(arr, left, right, comp)]
        while (b <= c) {
            let result = comp(arr[b], pivot)
            if (result < 0)
                swap(arr, a++, b++)
            else if (result > 0)
                swap(arr, b, c--)
            else
                b++
        }
        if (k <= a)
            right = a
        else if (k > b)
            left = b
        else
            return arr[k - 1]
    }
};
const kFirstElements = (arr, k, left=0, right=arr.length - 1, comp=(a,b) => a - b) => {
    if (k <= 0)
        return []
    if (k >= arr.length)
        return arr
    while (true) {
        let a = left, b = left, c = right, 
            pivot = arr[findPivot(arr, left, right, comp)]
        while (b <= c) {
            let result = comp(arr[b], pivot)
            if (result < 0)
                swap(arr, a++, b++)
            else if (result > 0)
                swap(arr, b, c--)
            else
                b++
        }
        if (k < a)
            right = a - 1
        else if (k > b)
            left = b
        else
            return arr.slice(0, k)
    }
};
// Median of 3
const findPivot = (arr, left, right, comp) => {
    let mid = left + right >> 1
    if (comp(arr[left], arr[right]) > 0)
        swap(arr, left, right)
    if (comp(arr[left], arr[mid]) > 0)
        swap(arr, left, mid)
    if (comp(arr[mid], arr[right]) > 0)
        swap(arr, mid, right)
    return mid
}
const swap = (arr, a, b) => {
    let temp = arr[a]
    arr[a] = arr[b], arr[b] = temp
}
