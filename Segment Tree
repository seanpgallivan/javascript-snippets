// -----------------------------------------------
// Simple Segment Tree w/ array
// -----------------------------------------------
class SegTreeArr {
    constructor(arg) {
        this.n = typeof arg === "number" ? arg : arg.length
        this.lookup = new Array(this.n).fill(0)
        let len = 1 << Math.ceil(Math.log2(this.n)) + 1
        this.data = new Array(len).fill(0)
        if (typeof arg === "object") 
            this.build(arg)
    }
    build(arr, p=1, from=0, to=this.n-1) {
        if (from === to) {
            this.lookup[from] = p
            return this.data[p] = arr[from]
        }
        let mid = from + to >> 1,
            left = this.build(arr, p * 2, from, mid),
            right = this.build(arr, p * 2 + 1, mid + 1, to)
        return this.data[p] = left + right
    }
    set(i, val) {
        let p = this.lookup[i], diff = val - this.data[p]
        this.data[p] = val
        for (p >>= 1; p; p >>= 1)
            this.data[p] += diff
        return val
    }
    get(i) {
        return this.data[this.lookup[i]]
    }
    rangeSum(i, j, p=1, from=0, to=this.n-1) {
        if (i <= from && to <= j)
            return this.data[p]
        let mid = from + to >> 1,
            left = mid < i ? 0 : this.rangeSum(i, j, p * 2, from, mid),
            right = j <= mid ? 0 : this.rangeSum(i, j, p * 2 + 1, mid + 1, to)
        return left + right
    }
    toArray() {
        return this.lookup.map(p => this.data[p])
    }
}



// -----------------------------------------------
// Lazy Segment Tree w/ array
// -----------------------------------------------
class SegTreeArrLazy {
    constructor(arg) {
        this.n = typeof arg === "number" ? arg : arg.length
        let len = 1 << Math.ceil(Math.log2(this.n)) + 1
        this.data = new Array(len).fill(0)
        this.lazy = new Array(len).fill(0)
        if (typeof arg === "object") 
            this.build(arg)
    }
    build(arr, p=1, from=0, to=this.n-1) {
        if (from === to) 
            return this.data[p] = arr[from]
        let mid = from + to >> 1,
            left = this.build(arr, p * 2, from, mid),
            right = this.build(arr, p * 2 + 1, mid + 1, to)
        return this.data[p] = left + right
    }
    set(i, val) {
        let p = 1, from = 0, to = this.n - 1
        while (from !== to) {
            val -= this.lazy[p]
            let mid = from + to >> 1
            if (i > mid)
                from = mid + 1, p += p + 1
            else
                to = mid, p += p
        }
        this.lazy[p] = val - this.data[p]
        return val
    }
    get(i) {
        return this.rangeSum(i, i)
    }
    rangeAdd(i, j, val, p=1, from=0, to=this.n-1) {
        if (i <= from && to <= j) {
            this.lazy[p] += val
            return val
        }
        let mid = from + to >> 1
        if (i <= mid)
            this.rangeAdd(i, j, val, p * 2, from, mid)
        if (mid < j)
            this.rangeAdd(i, j, val, p * 2 + 1, mid + 1, to)
        return val
    }
    sink(p, from, to) {
        this.data[p] += this.lazy[p] * (to - from + 1)
        if (from < to) {
            this.lazy[p * 2] += this.lazy[p]
            this.lazy[p * 2 + 1] += this.lazy[p]
        }
        this.lazy[p] = 0
    }
    rangeSum(i, j, p=1, from=0, to=this.n-1) {
        this.sink(p, from, to)
        if (i <= from && to <= j)
            return this.data[p]
        let mid = from + to >> 1,
            left = i <= mid ? this.rangeSum(i, j, p * 2, from, mid) : 0,
            right = mid < j ? this.rangeSum(i, j, p * 2 + 1, mid + 1, to) : 0
        return left + right
    }
    toArray(res=new Array(this.n), p=1, from=0, to=this.n-1) {
        this.sink(p, from, to)
        if (from === to)
            res[from] = this.data[p]
        else {
            let mid = from + to >> 1
            this.toArray(res, p * 2, from, mid)
            this.toArray(res, p * 2 + 1, mid + 1, to)
        }
        return res
    }
}



// -----------------------------------------------
// Verbose Segment Tree w/ nodes
// -----------------------------------------------
class SegTreeNode {
    constructor(val, from, to) {
        this.val = val
        this.from = from
        this.to = to
        this.min = val
        this.max = val
        this.left = null
        this.right = null
    }
}
class SegTree {
    constructor(arr) {
        this.n = arr.length
        this.root = this.build(arr, 0, this.n - 1)
    }
    build(arr, from, to) {
        let node = new SegTreeNode(arr[from], from, to)
        if (from !== to) {
            let mid = from + to >> 1,
                left = this.build(arr, from, mid),
                right = this.build(arr, mid + 1, to)
            node.left = left, node.right = right
            this.calc(node)
        }
        return node
    }
    calc(node) {
        let left = node.left, right = node.right
        node.val = this.combine(left.val, right.val)
        node.max = this.compare(left.max, right.max, 1)
        node.min = this.compare(left.min, right.min, -1)
    }
    compare(a, b, side) {
        if (a > b)
            return side === 1 ? a : b
        else
            return side === 1 ? b : a
    }
    combine(a, b) {
        return a + b
    }
    singleEval(index, node, func, ...args) {
        if (node.from === node.to) {
            if (func === "add")
                node.val = this.combine(node.val, args[0])
            else if (func === "update")
                node.val = args[0]
        } else {
            if (index > (node.from + node.to >> 1))
                this.singleEval(index, node.right, func, ...args)
            else
                this.singleEval(index, node.left, func, ...args)
            this.calc(node)
        }
    }
    update(index, val) {
        this.singleEval(index, this.root, "update", val)
    }
    incr(index) {
        this.singleEval(index, this.root, "add", 1)
    }
    decr(index) {
        this.singleEval(index, this.root, "add", -1)
    }
    add(index, val) {
        this.singleEval(index, this.root, "add", val)
    }
    subt(index, val) {
        this.singleEval(index, this.root, "add", -val)
    }
    rangeEval(from, to, node, attr, func, ...args) {
        if (from === node.from && to === node.to)
            return node[attr]
        let mid = node.from + node.to >> 1
        if (from > mid)
            return this.rangeEval(from, to, node.right, attr, func, ...args)
        else if (to <= mid)
            return this.rangeEval(from, to, node.left, attr, func, ...args)
        else {
            let left = this.rangeEval(from, mid, node.left, attr, func, ...args),
                right = this.rangeEval(mid + 1, to, node.right, attr, func, ...args)
            return func(left, right, ...args)
        }
    }
    rangeSum(from, to) {
        return this.rangeEval(from, to, this.root, "val", this.combine)
    }
    rangeMax(from, to) {
        return this.rangeEval(from, to, this.root, "max", this.compare, 1)
    }
    rangeMin(from, to) {
        return this.rangeEval(from, to, this.root, "min", this.compare, -1)
    }
}
